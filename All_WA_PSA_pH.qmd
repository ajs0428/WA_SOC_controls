---
title: "All WA SOC Relationship with Particle Size and pH"
format: html
---


```{r setup, include=FALSE}
library(formatR)
knitr::opts_chunk$set(echo = FALSE, fig.align = "center", fig.show = "hold", time_it = TRUE, dpi = 100,
                      message = FALSE, warning = FALSE)
knitr::opts_chunk$set(tidy.opts = list(width.cutoff = 60), tidy = T, collapse = TRUE)
knitr::opts_knit$set(root.dir = '/Users/Anthony/OneDrive - UW/University of Washington/Data and Modeling/')
library(rgl)
library(openxlsx)
library(terra)
library(lme4)
library(MASS)
library(mgcv)
library(lmerTest)
library(quantreg)
library(MuMIn)
library(RLRsim)
library(terra)
library(sf)
library(mapview)
library(car)
library(tidyverse)
library(tidyterra)
library(forcats)
library(sjPlot)
library(sjstats)
library(DHARMa)
library(ggeffects)
library(merTools)
library(glmnet)
library(stats)
library(ggcorrplot)
library(RColorBrewer)
library(cowplot)
library(webshot)
library(kableExtra)
library(pdp)
library(vip)
library(formatR)
library(ggpubr)
library(grid)
library(gridExtra)
library(aqp)
library(ithir)
library(mpspline2)
library(dplyr)

knitr::knit_hooks$set(webgl = hook_webgl)
rgl::setupKnitr(autoprint = TRUE)


# Quick R^2 function
r.sq <- function(y,y.fitted){
    res <- y-y.fitted
    1-sum(res^2)/sum((y-mean(y))^2)
}
```


Data

There isn't enough contious horizon data for doing the mass preserving splines

```{r}

wa_hor <- read.csv("SOIL CARBON/All_WA/data/dataframes/All_WA_horizons.csv") |> 
  dplyr::select(-redox, -field_texture, -field_texture_binned)

psa_dat <- openxlsx::read.xlsx("/Users/Anthony/OneDrive - UW/University of Washington/Lab Work/WA_Texture_pH/All_PNW_horizons_pH_PSA.xlsx", sheet = "PSA Draft Analysis", cols = c(1:8)) |> 
    rename("SOCperc" = "SOC%",
           "SiltClay" = "SILT+CLAY",
           "sample_ID" = "Site",
           "StudyArea" = "Study.Area",
           "depth_cm" = "depth") |>
    dplyr::group_by(sample_ID) |> 
    arrange(depth_cm, .by_group = TRUE ) |> 
    mutate(top = case_when(is.na(depth_cm - lag(depth_cm)) ~ 0,
                           .default = lag(depth_cm)),
           bottom = depth_cm,
           center = abs(top - (top - bottom)/2)) |> 
    dplyr::select(sample_ID, StudyArea, top, bottom, center, SOCperc, Sand, Silt, Clay, SiltClay) |> 
  mutate(helper = paste0(sample_ID, "|", bottom)) |> 
  dplyr::right_join(y = wa_hor, join_by(helper)) |> 
  dplyr::select(-sample_ID.y) |> 
  dplyr::rename(sample_ID = sample_ID.x)
psa_dat

readr::write_csv(psa_dat, file = "SOIL CARBON/All_WA/data/dataframes/All_WA_horizons_PSA.csv")


# psa_dat_sub <- psa_dat |> dplyr::select(sample_ID, top, bottom, center, SiltClay)
# psa_dat_spl <- mpspline_tidy(obj = psa_dat_sub, var_name = "SiltClay", d = c(0, 15, 30, 60, 100, 200)) 
# # wa_spl_datperc_0_15_30_60_100_200 <- psa_dat_spl$est_dcm |>
# #     left_join(y = wa_hor_dat_sub, by = join_by(sample_ID), relationship = "many-to-one") |>
#     rename(SOC_perc_spline = SPLINED_VALUE,
#            upper_depth = UD,
#            lower_depth = LD)
```


```{r}
wa_hor_psa_pts <- vect(psa_dat, geom = c("lon", "lat"), crs = "EPSG:4326")
plot(wa_hor_psa_pts)

hoh_stack <- rast("SOIL CARBON/All_WA/data/Rasters/PredictorStacks/Hoh_PredictorStack_Class.tif")
mas_stack <- rast("SOIL CARBON/All_WA/data/Rasters/PredictorStacks/Mas_PredictorStack_Class.tif")
col_stack <- rast("SOIL CARBON/All_WA/data/Rasters/PredictorStacks/Col_PredictorStack_Class.tif")

wa_hor_psa_pts |> filter(site == "HOH") |> project("EPSG:2855") |> 
  terra::extract(x = hoh_stack, bind = TRUE) |>
  writeVector("SOIL CARBON/All_WA/data/points/hoh_psa_pts_2855.gpkg", overwrite = TRUE)
wa_hor_psa_pts |> filter(site == "MAS") |> project("EPSG:2856") |> 
  terra::extract(x = mas_stack, bind = TRUE) |>
  writeVector("SOIL CARBON/All_WA/data/points/mas_psa_pts_2856.gpkg", overwrite = TRUE)
wa_hor_psa_pts |> filter(site == "COL") |> project("EPSG:2855") |> 
  terra::extract(x = col_stack, bind = TRUE) |>
  writeVector("SOIL CARBON/All_WA/data/points/col_psa_pts_2855.gpkg", overwrite = TRUE)
```


```{r}
hoh_psa_dat <- data.frame(vect("SOIL CARBON/All_WA/data/points/hoh_psa_pts_2855.gpkg"))
mas_psa_dat <- data.frame(vect("SOIL CARBON/All_WA/data/points/mas_psa_pts_2856.gpkg"))
col_psa_dat <- data.frame(vect("SOIL CARBON/All_WA/data/points/col_psa_pts_2855.gpkg"))

columns_to_exclude <- c("carbon_stock_g_cm2", "carbon_perc") 

wa_psa_dat <- rbind(hoh_psa_dat, mas_psa_dat, col_psa_dat) |> 
  rename(lower_depth = depth_cm) |>
  filter(!is.na(SiltClay)) |>
  mutate(
  GEO = as.factor(GEO),
  geomorphons = as.factor(geomorphons),
  site = as.factor(site),
  site = fct_reorder(site, carbon_stock_g_cm2, .fun = "median")) |>
  dplyr::rename_with(~gsub("_median", "", .x, fixed = TRUE)) |> 
  dplyr::mutate(across(
        dplyr::where(is.numeric) & !all_of(columns_to_exclude),
                  ~dplyr::case_when(TRUE ~ scale(.))))
wa_psa_dat

wa_psa_dat_wet <- rbind(hoh_psa_dat, mas_psa_dat, col_psa_dat) |> 
  filter(WIP >= 0.50) |> 
  filter(!is.na(SiltClay)) |>
  rename(lower_depth = depth_cm) |>
  mutate(
  GEO = as.factor(GEO),
  geomorphons = as.factor(geomorphons),
  site = as.factor(site),
  site = fct_reorder(site, carbon_stock_g_cm2, .fun = "median")) |>
  dplyr::rename_with(~gsub("_median", "", .x, fixed = TRUE)) |> 
  dplyr::mutate(across(
        dplyr::where(is.numeric) & !all_of(columns_to_exclude),
                  ~dplyr::case_when(TRUE ~ scale(.))))

wa_psa_dat_upl <- rbind(hoh_psa_dat, mas_psa_dat, col_psa_dat) |> 
  filter(WIP < 0.50) |> 
  filter(!is.na(SiltClay)) |>
  rename(lower_depth = depth_cm) |>
  mutate(
  GEO = as.factor(GEO),
  geomorphons = as.factor(geomorphons),
  site = as.factor(site),
  site = fct_reorder(site, carbon_stock_g_cm2, .fun = "median")) |>
  dplyr::rename_with(~gsub("_median", "", .x, fixed = TRUE)) |> 
  dplyr::mutate(across(
        dplyr::where(is.numeric) & !all_of(columns_to_exclude),
                  ~dplyr::case_when(TRUE ~ scale(.))))
```


```{r}
ggplot(wa_psa_dat, aes(x = GEO, y = SiltClay)) +
  geom_point(aes(color = MAP)) +
  scale_color_viridis_b()
```


```{r}
#mod7 <- get(load("SOIL CARBON/All_WA/analysis/models/All_WA_Model7_Spline.RData"))

gmod7_c <- lmer(log10(carbon_stock_g_cm2) ~ Clay*(MAP+WIP) + 
                  lower_depth + CHM + GEO + HLI + 
                  lower_depth:MAP + 
                  (1 | sample_ID),
               data = wa_psa_dat,
               REML = FALSE, na.action = 'na.fail')
gmod7_sc <- lmer(log10(carbon_stock_g_cm2) ~ SiltClay*(MAP+WIP) + 
                  lower_depth + CHM + GEO + HLI + 
                  lower_depth:MAP + 
                  (1 | sample_ID),
                data = wa_psa_dat,
                REML = FALSE, na.action = 'na.fail')

dmod7_c <- dredge(gmod7_c, rank = "AIC", extra = "R^2", m.lim = c(1,8), fixed = c("Clay"))
dmod7_sc <- dredge(gmod7_sc, rank = "AIC", extra = "R^2", m.lim = c(1,8), fixed = c("SiltClay"))

mod7_c <- get.models(dmod7_c, 1)[[1]] 
mod7_sc <- get.models(dmod7_sc, 1)[[1]] 

anova(mod7_sc, mod7_c)

summary(mod7_c)
anova(mod7_c)

summary(mod7_sc)
anova(mod7_sc)

gmod7_sc_w <- lmer(log10(carbon_stock_g_cm2) ~ SiltClay*(MAP+WIP) + 
                  lower_depth + CHM + GEO + HLI + 
                   lower_depth:MAP + 
                  (1 | sample_ID),
                data = wa_psa_dat_wet,
                REML = FALSE, na.action = 'na.fail')
gmod7_sc_u <- lmer(log10(carbon_stock_g_cm2) ~ SiltClay*(MAP+WIP) + 
                  lower_depth + CHM + GEO + HLI + 
                  lower_depth:MAP + 
                  (1 | sample_ID),
                data = wa_psa_dat_upl,
                REML = FALSE, na.action = 'na.fail')

dmod7_sc_w <- dredge(gmod7_sc_w, rank = "AIC", extra = "R^2", m.lim = c(1,8), fixed = c("SiltClay"))
dmod7_sc_u <- dredge(gmod7_sc_u, rank = "AIC", extra = "R^2", m.lim = c(1,8), fixed = c("SiltClay"))

mod7_sc_w <- get.models(dmod7_sc_w, 1)[[1]] 
mod7_sc_u <- get.models(dmod7_sc_u, 1)[[1]] 

summary(mod7_sc_w)
summary(mod7_sc_u)

anova(mod7_sc_w)
anova(mod7_sc_u)

```



```{r}

check_assump_func <- function(model) {
  plot(model)
  plot(model, resid(.) ~ fitted(.)|sample_ID, abline = 0)
  
  qqnorm(resid(model))
  qqline(resid(model))
  
  lev <- hat(model.matrix(model))
  plot(resid(model) ~ lev, xlab = "leverage")
  
  cd <- cooks.distance(model)
  plot(lev)
  points(cd, col = "blue")
  
  hist(as.vector(unlist(ranef(model)$sample_ID)))
}

check_assump_func(mod7_sc)
check_assump_func(mod7_sc_w)
check_assump_func(mod7_sc_u)


```



```{r}
library(effectsize)
library(r2glmm)

ci_anova_tab_TpH_func <- function(model, data) {
  anova <- anova(model) |> data.frame() |> tibble::rownames_to_column() |>
    rename(Predictor = rowname) |> 
    select(Predictor, F.value, Pr..F.) 
  ci <- confint.merMod(model, method = "boot", 
                     nsim = 1000, oldNames = FALSE, level = 0.95, set.seed(11))
  r2partial <- r2glmm::r2beta(model, data = data, method = "nsj") |> data.frame() |> 
    rename(Predictor = Effect,
           Rsq.upper.CL = upper.CL,
           Rsq.lower.CL = lower.CL,) |> 
    select(Predictor, Rsq, Rsq.upper.CL, Rsq.lower.CL)
  
  
  ci_anova_tab <- ci |> data.frame() |> tibble::rownames_to_column() |>
    rename(Predictor = rowname,
          "2.5%" = X2.5..,
          "97.5%" = X97.5..) |> 
    dplyr::filter(!str_detect(Predictor, "sd"), 
                  !str_detect(Predictor, "Intercept"), 
                  !str_detect(Predictor, "sigma")) |> 
    full_join(y = anova, join_by(Predictor)) |> 
    full_join(y = r2partial, join_by(Predictor)) |> 
    mutate(across(where(is.numeric), ~base::round(.x, 2)))
  return(ci_anova_tab)
}

ci_anova_psa_tab <- ci_anova_tab_TpH_func(model = mod7_sc, data = wa_psa_dat)
ci_anova_psa_tab_w <- ci_anova_tab_TpH_func(model = mod7_sc_w, data = wa_psa_dat_wet)
ci_anova_psa_tab_u <- ci_anova_tab_TpH_func(model = mod7_sc_u, data = wa_psa_dat_upl)

ci_anova_psa_tab
ci_anova_psa_tab_w
ci_anova_psa_tab_u
```

```{r}

PI_func <- function(model, data) {
    PI <- predictInterval(
      model,
      which = c("full"),
      level = 0.95,
      n.sims = 1000,
      stat = c("median"),
      type = c("linear.prediction"),
      include.resid.var = TRUE,
      returnSims = TRUE,
      seed = 11
    )
    
    PI_trans <- PI |> mutate(fit_t = 10**(fit),
                     upr_t = 10**(upr),
                     lwr_t = 10**(lwr),
                     act = data$carbon_stock_g_cm2,
                     fit_t_act = 10**(fit_t - act))
    
    PI_rmse <- sqrt(abs(sum(PI_trans$fit_t - PI_trans$act)**2)/nrow(data))
    return(list(PI, PI_trans, PI_rmse)) 
}

PI_func(model = mod7_sc, data = wa_psa_dat)
PI_func(model = mod7_sc_w, data = wa_psa_dat_wet)
PI_func(model = mod7_sc_u, data = wa_psa_dat_upl)

RMSE.merMod(mod7_sc)

```



```{r}
library(ppcor)
vars1 <- list("WIP", "MAP", "CHM", "SiltClay", "lower_depth")
vars2 <- list("MAP", "CHM", "SiltClay",  "lower_depth", "WIP")
vars3 <- list("CHM", "SiltClay", "lower_depth", "WIP", "MAP")
vars4 <- list("SiltClay", "lower_depth", "WIP", "MAP", "CHM")
vars5 <- list("lower_depth", "WIP", "MAP", "CHM", "SiltClay")
varsdf <- list(vars1, vars2, vars3, vars4, vars5)

partial_func <- function(vars){
  var_list <- list()
  c_est_list <- list()
  c_pval_list <- list()
  con_var_list <- list()
  p_est_list <- list()
  p_pval_list <- list()
  #site_list <- list()
  
  for(i in 1:length(vars)){
    if(i + 1 <= length(vars)) {
      ct <- cor.test(wa_psa_dat[,vars[[1]]], 
                     wa_psa_dat[,"carbon_stock_g_cm2"])
      pt <- pcor.test(wa_psa_dat[,vars[[1]]], 
                      wa_psa_dat[,"carbon_stock_g_cm2"], 
                      wa_psa_dat[,vars[[i+1]]])
      
      var_list[[i]] <- paste0(vars[[1]], "_NULL")
      c_est_list[[i]] <- ct$estimate[[1]]
      c_pval_list[[i]] <- ct$p.value[[1]]
      con_var_list[[i]] <- vars[[i+1]]
      p_est_list[[i]] <- pt$estimate[[1]]
      p_pval_list[[i]] <- pt$p.value[[1]]
      #site_list[i] <- 
    } else {
      break
    }
  }
  #return(unlist(est_list))
  cdf <- data.frame(var = unlist(var_list), 
                   est = unlist(c_est_list), 
                   pval = unlist(c_pval_list))
  pdf <- data.frame(var = unlist(con_var_list),
                   est = unlist(p_est_list), 
                   pval = unlist(p_pval_list)) 
  df <- rbind(cdf[1,], pdf)
  return(df)
}

plist <- list()
for(i in 1:length(varsdf)){
  plist[[i]] <- data.frame(partial_func(unlist(varsdf[[i]])))
}

partial_df <- data.frame(pred_vars = unlist(vars1),
                         WIP = c(NA, #WIP
                                 plist[[2]][plist[[2]]$var == "WIP", "est"], #MAP
                                 plist[[3]][plist[[3]]$var == "WIP", "est"], #CHM
                                 plist[[4]][plist[[4]]$var == "WIP", "est"]), #lower_depth
                         MAP = c(plist[[1]][plist[[1]]$var == "MAP", "est"],
                                 NA,
                                 plist[[3]][plist[[3]]$var == "MAP", "est"],
                                 plist[[4]][plist[[4]]$var == "MAP", "est"]),
                         CHM = c(plist[[1]][plist[[1]]$var == "CHM", "est"],
                                 plist[[2]][plist[[2]]$var == "CHM", "est"],
                                 NA,
                                 plist[[4]][plist[[4]]$var == "CHM", "est"]), 
                         CHM = c(plist[[1]][plist[[1]]$var == "CHM", "est"],
                                 plist[[2]][plist[[2]]$var == "CHM", "est"],
                                 NA,
                                 plist[[4]][plist[[4]]$var == "lower_depth", "est"]), 
                         Depth = c(plist[[1]][plist[[1]]$var == "lower_depth", "est"],
                                 plist[[2]][plist[[2]]$var == "lower_depth", "est"],
                                 plist[[3]][plist[[3]]$var == "lower_depth", "est"],
                                 NA), 
                         Null = c(plist[[1]][plist[[1]]$var == "WIP_NULL", "est"], 
                                  plist[[2]][plist[[2]]$var == "MAP_NULL", "est"],
                                  plist[[3]][plist[[3]]$var == "CHM_NULL", "est"],
                                  plist[[4]][plist[[4]]$var == "lower_depth_NULL", "est"]))

partial_df
```
```{r}
wa_psa_dat_num <- wa_psa_dat |> dplyr::select(carbon_stock_g_cm2, WIP, MAP, lower_depth, SiltClay)
cor.test(wa_psa_dat$carbon_stock_g_cm2, wa_psa_dat$MAP)
pcor.test(wa_psa_dat$carbon_stock_g_cm2, wa_psa_dat$MAP, wa_psa_dat$SiltClay)
pcor(wa_psa_dat_num, "pearson")
```


```{r}
cor.test(wa_psa_dat$carbon_stock_g_cm2, wa_psa_dat$WIP)
pcor.test(wa_psa_dat$carbon_stock_g_cm2, wa_psa_dat$WIP, wa_psa_dat$SiltClay)
cor.test(wa_psa_dat$carbon_stock_g_cm2, wa_psa_dat$SiltClay)
pcor.test(wa_psa_dat$carbon_stock_g_cm2, wa_psa_dat$SiltClay, wa_psa_dat$WIP)

cor.test(wa_psa_dat$carbon_stock_g_cm2, wa_psa_dat$MAP)
pcor.test(wa_psa_dat$carbon_stock_g_cm2, wa_psa_dat$MAP, wa_psa_dat$SiltClay)

cor.test(wa_psa_dat$carbon_stock_g_cm2, wa_psa_dat$CHM)
pcor.test(wa_psa_dat$carbon_stock_g_cm2, wa_psa_dat$CHM, wa_psa_dat$SiltClay)

cor.test(wa_psa_dat$carbon_stock_g_cm2, wa_psa_dat$lower_depth)
pcor.test(wa_psa_dat$carbon_stock_g_cm2, wa_psa_dat$lower_depth, wa_psa_dat$SiltClay)
```


